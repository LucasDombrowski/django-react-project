# Generated by Django 5.1.7 on 2025-05-15 20:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='competition_logos/')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
            options={
                'verbose_name': 'Competition',
                'verbose_name_plural': 'Competitions',
                'ordering': ['start_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='team_logos/')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('score', models.IntegerField(default=0, help_text="The user's current score in the betting game.")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_one_score', models.IntegerField(default=0)),
                ('team_two_score', models.IntegerField(default=0)),
                ('team_one_draw_score', models.IntegerField(default=0, help_text='The score of the match if it was a draw and it needed a winner.')),
                ('team_two_draw_score', models.IntegerField(default=0, help_text='The score of the match if it was a draw and it needed a winner.')),
                ('score_points', models.IntegerField(default=10, help_text="Points awarded if the user's bet on this match is correct.")),
                ('start_datetime', models.DateTimeField()),
                ('is_finished', models.BooleanField(default=False)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='django_bridge_project.competition')),
                ('team_one', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_matches', to='django_bridge_project.team')),
                ('team_two', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_matches', to='django_bridge_project.team')),
            ],
            options={
                'verbose_name': 'Match',
                'verbose_name_plural': 'Matches',
                'ordering': ['start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='Bet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bets', to=settings.AUTH_USER_MODEL)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bets', to='django_bridge_project.match')),
            ],
            options={
                'verbose_name': 'Bet Slip',
                'verbose_name_plural': 'Bet Slips',
                'ordering': ['match', 'user'],
                'unique_together': {('match', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text="The question or description for this prediction. E.g., 'Final score of Team A?', 'First player to score?', 'Will a penalty be awarded?'", max_length=255)),
                ('prediction_type', models.CharField(choices=[('numerical', 'Numerical'), ('player', 'Player'), ('boolean', 'Boolean')], default='numerical', max_length=20)),
                ('score_points', models.IntegerField(default=10, help_text="Points awarded if the user's bet on this prediction is correct.")),
                ('correct_value', models.CharField(blank=True, help_text='The actual outcome of this prediction, filled after the match is settled.', max_length=255, null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='django_bridge_project.match')),
            ],
            options={
                'verbose_name': 'Prediction Criterion',
                'verbose_name_plural': 'Prediction Criteria',
                'ordering': ['match', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('nickname', models.CharField(blank=True, max_length=100)),
                ('role', models.CharField(blank=True, max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='player_photos/')),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='django_bridge_project.team')),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255)),
                ('bet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='django_bridge_project.bet')),
                ('prediction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='django_bridge_project.prediction')),
            ],
            options={
                'verbose_name': "User's Answer",
                'verbose_name_plural': "User's Answers",
                'ordering': ['bet', 'prediction'],
                'unique_together': {('bet', 'prediction')},
            },
        ),
    ]
